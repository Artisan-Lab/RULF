error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
  --> $DIR/interior-mutability.rs:5:18
   |
LL |     catch_unwind(|| { x.set(23); });
   |     ------------ ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
   |     |
   |     required by a bound introduced by this call
   |
   = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`
   = note: required because it appears within the type `Cell<i32>`
   = note: required for `&Cell<i32>` to implement `UnwindSafe`
note: required because it's used within this closure
  --> $DIR/interior-mutability.rs:5:18
   |
LL |     catch_unwind(|| { x.set(23); });
   |                  ^^
note: required by a bound in `catch_unwind`
  --> $SRC_DIR/std/src/panic.rs:LL:COL
   |
LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {
   |                                        ^^^^^^^^^^ required by this bound in `catch_unwind`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0277`.
