error: lifetime may not live long enough
  --> $DIR/lt-ref-self-async.rs:13:9
   |
LL |     async fn ref_self(&self, f: &u32) -> &u32 {
   |                       -         - let's call the lifetime of this reference `'1`
   |                       |
   |                       let's call the lifetime of this reference `'2`
LL |         f
   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`
   |
help: consider introducing a named lifetime parameter and update trait if needed
   |
LL |     async fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {
   |                      ++++  ++           ++

error: lifetime may not live long enough
  --> $DIR/lt-ref-self-async.rs:20:9
   |
LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {
   |                             -         - let's call the lifetime of this reference `'1`
   |                             |
   |                             let's call the lifetime of this reference `'2`
LL |         f
   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`
   |
help: consider introducing a named lifetime parameter and update trait if needed
   |
LL |     async fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {
   |                      ++++        ++           ++

error: lifetime may not live long enough
  --> $DIR/lt-ref-self-async.rs:25:9
   |
LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {
   |                                     -          - let's call the lifetime of this reference `'1`
   |                                     |
   |                                     let's call the lifetime of this reference `'2`
LL |         f
   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`
   |
help: consider introducing a named lifetime parameter and update trait if needed
   |
LL |     async fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {
   |                          ++++            ++            ++

error: lifetime may not live long enough
  --> $DIR/lt-ref-self-async.rs:30:9
   |
LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {
   |                                     -          - let's call the lifetime of this reference `'1`
   |                                     |
   |                                     let's call the lifetime of this reference `'2`
LL |         f
   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`
   |
help: consider introducing a named lifetime parameter and update trait if needed
   |
LL |     async fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {
   |                          ++++            ++            ++

error: lifetime may not live long enough
  --> $DIR/lt-ref-self-async.rs:35:9
   |
LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {
   |                                             -           - let's call the lifetime of this reference `'1`
   |                                             |
   |                                             let's call the lifetime of this reference `'2`
LL |         f
   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`
   |
help: consider introducing a named lifetime parameter and update trait if needed
   |
LL |     async fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {
   |                              ++++                ++             ++

error: lifetime may not live long enough
  --> $DIR/lt-ref-self-async.rs:40:9
   |
LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {
   |                                         -           - let's call the lifetime of this reference `'1`
   |                                         |
   |                                         let's call the lifetime of this reference `'2`
LL |         f
   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`
   |
help: consider introducing a named lifetime parameter and update trait if needed
   |
LL |     async fn box_pin_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {
   |                          ++++                ++             ++

error: aborting due to 6 previous errors

