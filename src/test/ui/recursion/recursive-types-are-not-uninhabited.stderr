error[E0005]: refutable pattern in local binding: `Err(_)` not covered
  --> $DIR/recursive-types-are-not-uninhabited.rs:6:9
   |
LL |     let Ok(x) = res;
   |         ^^^^^ pattern `Err(_)` not covered
   |
   = note: `let` bindings require an "irrefutable pattern", like a `struct` or an `enum` with only one variant
   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html
note: `Result<u32, &R<'_>>` defined here
  --> $SRC_DIR/core/src/result.rs:LL:COL
   |
LL | pub enum Result<T, E> {
   | ---------------------
...
LL |     Err(#[stable(feature = "rust1", since = "1.0.0")] E),
   |     ^^^ not covered
   = note: the matched value is of type `Result<u32, &R<'_>>`
help: you might want to use `if let` to ignore the variant that isn't matched
   |
LL |     let x = if let Ok(x) = res { x } else { todo!() };
   |     ++++++++++                 ++++++++++++++++++++++
help: alternatively, you might want to use let else to handle the variant that isn't matched
   |
LL |     let Ok(x) = res else { todo!() };
   |                     ++++++++++++++++

error: aborting due to previous error

For more information about this error, try `rustc --explain E0005`.
