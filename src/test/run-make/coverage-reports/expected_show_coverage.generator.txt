    1|       |#![feature(generators, generator_trait)]
    2|       |
    3|       |use std::ops::{Generator, GeneratorState};
    4|       |use std::pin::Pin;
    5|       |
    6|       |// The following implementation of a function called from a `yield` statement
    7|       |// (apparently requiring the Result and the `String` type or constructor)
    8|       |// creates conditions where the `generator::StateTransform` MIR transform will
    9|       |// drop all `Counter` `Coverage` statements from a MIR. `simplify.rs` has logic
   10|       |// to handle this condition, and still report dead block coverage.
   11|      1|fn get_u32(val: bool) -> Result<u32, String> {
   12|      1|    if val { Ok(1) } else { Err(String::from("some error")) }
                                          ^0
   13|      1|}
   14|       |
   15|      1|fn main() {
   16|      1|    let is_true = std::env::args().len() == 1;
   17|      1|    let mut generator = || {
   18|      1|        yield get_u32(is_true);
   19|      1|        return "foo";
   20|      1|    };
   21|       |
   22|      1|    match Pin::new(&mut generator).resume(()) {
   23|      1|        GeneratorState::Yielded(Ok(1)) => {}
   24|      0|        _ => panic!("unexpected return from resume"),
   25|       |    }
   26|      1|    match Pin::new(&mut generator).resume(()) {
   27|      1|        GeneratorState::Complete("foo") => {}
   28|      0|        _ => panic!("unexpected return from resume"),
   29|       |    }
   30|      1|}

