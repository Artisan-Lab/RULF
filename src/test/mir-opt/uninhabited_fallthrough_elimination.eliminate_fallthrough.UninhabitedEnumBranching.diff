- // MIR for `eliminate_fallthrough` before UninhabitedEnumBranching
+ // MIR for `eliminate_fallthrough` after UninhabitedEnumBranching
  
  fn eliminate_fallthrough(_1: S) -> u32 {
      debug s => _1;                       // in scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+0:26: +0:27
      let mut _0: u32;                     // return place in scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+0:35: +0:38
      let mut _2: isize;                   // in scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+2:9: +2:10
  
      bb0: {
          _2 = discriminant(_1);           // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:11: +1:12
-         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12
+         switchInt(move _2) -> [1_isize: bb3, 2_isize: bb2, otherwise: bb5]; // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+1:5: +1:12
      }
  
      bb1: {
          _0 = const 3_u32;                // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+4:14: +4:15
          goto -> bb4;                     // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+4:14: +4:15
      }
  
      bb2: {
          _0 = const 1_u32;                // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+2:14: +2:15
          goto -> bb4;                     // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+2:14: +2:15
      }
  
      bb3: {
          _0 = const 2_u32;                // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+3:14: +3:15
          goto -> bb4;                     // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+3:14: +3:15
      }
  
      bb4: {
          return;                          // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+6:2: +6:2
+     }
+ 
+     bb5: {
+         unreachable;                     // scope 0 at $DIR/uninhabited_fallthrough_elimination.rs:+4:14: +4:15
      }
  }
  
