- // MIR for `opt1` before InstCombine
+ // MIR for `opt1` after InstCombine
  
  fn opt1(_1: bool) -> u32 {
      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10
      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:+0:21: +0:24
      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:17
      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:+1:8: +1:9
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17
          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9
          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:+1:8: +1:9
-         _2 = Ne(move _3, const true);    // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17
+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17
          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:+1:16: +1:17
          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:+1:8: +1:17
      }
  
      bb1: {
          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:+1:20: +1:21
          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34
      }
  
      bb2: {
          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:+1:31: +1:32
          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:+1:5: +1:34
      }
  
      bb3: {
          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:+1:33: +1:34
          return;                          // scope 0 at $DIR/bool_compare.rs:+2:2: +2:2
      }
  }
  
