- // MIR for `main` before ConstProp
+ // MIR for `main` after ConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:+0:11: +0:11
      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:+1:9: +1:10
      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:+1:13: +1:64
      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:+1:34: +1:44
      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:+1:21: +1:31
      scope 1 {
          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:+1:9: +1:10
      }
      scope 2 {
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:+1:9: +1:10
          StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:+1:13: +1:64
          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:+1:34: +1:44
          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:+1:34: +1:44
          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:+1:34: +1:44
          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:+1:34: +1:44
-         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:+1:21: +1:31
-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31
+         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:+1:21: +1:31
+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31
      }
  
      bb1: {
          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:+1:21: +1:31
      }
  
      bb2: {
          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:+1:47: +1:49
          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64
      }
  
      bb3: {
          _2 = const 10_i32;               // scope 0 at $DIR/discriminant.rs:+1:59: +1:61
          goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:+1:13: +1:64
      }
  
      bb4: {
          _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/discriminant.rs:+1:13: +1:68
          StorageDead(_2);                 // scope 0 at $DIR/discriminant.rs:+1:67: +1:68
          StorageDead(_3);                 // scope 0 at $DIR/discriminant.rs:+1:68: +1:69
          _0 = const ();                   // scope 0 at $DIR/discriminant.rs:+0:11: +2:2
          StorageDead(_1);                 // scope 0 at $DIR/discriminant.rs:+2:1: +2:2
          return;                          // scope 0 at $DIR/discriminant.rs:+2:2: +2:2
      }
  }
  
