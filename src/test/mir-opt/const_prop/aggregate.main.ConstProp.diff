- // MIR for `main` before ConstProp
+ // MIR for `main` after ConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11
      let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10
      let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24
      let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22
      scope 1 {
          debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10
          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24
          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22
          Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:+1:13: +1:22
          (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22
          (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22
          (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22
-         _2 = (_3.1: i32);                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24
-         _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/aggregate.rs:+1:13: +1:28
+         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24
+         _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:28
          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28
          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29
          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +2:2
          StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+2:1: +2:2
          return;                          // scope 0 at $DIR/aggregate.rs:+2:2: +2:2
      }
  }
  
