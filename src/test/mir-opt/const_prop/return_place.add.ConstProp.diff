- // MIR for `add` before ConstProp
+ // MIR for `add` after ConstProp
  
  fn add() -> u32 {
      let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16
      let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10
  
      bb0: {
-         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:+1:5: +1:10
-         assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10
+         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10
+         assert(!const false, "attempt to compute `{} + {}`, which would overflow", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10
      }
  
      bb1: {
-         _0 = move (_1.0: u32);           // scope 0 at $DIR/return_place.rs:+1:5: +1:10
+         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10
          return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2
      }
  }
  
