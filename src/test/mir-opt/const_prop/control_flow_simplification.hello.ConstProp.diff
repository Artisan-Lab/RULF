- // MIR for `hello` before ConstProp
+ // MIR for `hello` after ConstProp
  
  fn hello() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:+0:14: +0:14
      let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21
      let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21
          _1 = const _;                    // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21
-         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21
+         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21
      }
  
      bb1: {
          StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL
          _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL
                                           // mir::Constant
                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL
                                           // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                           // mir::Constant
                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL
                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }
      }
  
      bb2: {
          nop;                             // scope 0 at $DIR/control-flow-simplification.rs:+3:6: +3:6
          StorageDead(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+3:5: +3:6
          return;                          // scope 0 at $DIR/control-flow-simplification.rs:+4:2: +4:2
      }
  }
  
