// MIR for `try_identity` after SimplifyLocals

fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {
    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:+0:17: +0:18
    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:+0:41: +0:57
    let mut _2: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:19: +1:33
    let mut _3: isize;                   // in scope 0 at $DIR/simplify_try.rs:+2:9: +2:15
    let _4: i32;                         // in scope 0 at $DIR/simplify_try.rs:+2:13: +2:14
    let mut _5: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:37: +2:50
    let mut _6: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:48: +2:49
    scope 1 {
        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10
    }
    scope 2 {
        debug e => _4;                   // in scope 2 at $DIR/simplify_try.rs:+2:13: +2:14
        scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50
            debug t => _6;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL
        }
        scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51
            debug e => _5;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22
        }
    }
    scope 3 {
        debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13
    }
    scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33
        debug r => _2;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23
    }

    bb0: {
        _2 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32
        _3 = discriminant(_2);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33
        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33
    }

    bb1: {
        ((_0 as Ok).0: u32) = ((_2 as Ok).0: u32); // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13
        Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10
        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10
        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2
    }

    bb2: {
        unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33
    }

    bb3: {
        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14
        StorageLive(_5);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50
        StorageLive(_6);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49
        StorageDead(_6);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50
        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11
        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11
        StorageDead(_5);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51
        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51
        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2
    }
}
