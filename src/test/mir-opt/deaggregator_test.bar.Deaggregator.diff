- // MIR for `bar` before Deaggregator
+ // MIR for `bar` after Deaggregator
  
  fn bar(_1: usize) -> Baz {
      debug a => _1;                       // in scope 0 at $DIR/deaggregator_test.rs:+0:8: +0:9
      let mut _0: Baz;                     // return place in scope 0 at $DIR/deaggregator_test.rs:+0:21: +0:24
      let mut _2: usize;                   // in scope 0 at $DIR/deaggregator_test.rs:+1:14: +1:15
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/deaggregator_test.rs:+1:14: +1:15
          _2 = _1;                         // scope 0 at $DIR/deaggregator_test.rs:+1:14: +1:15
-         _0 = Baz { x: move _2, y: const 0f32, z: const false }; // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35
+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35
+         (_0.0: usize) = move _2;         // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35
+         (_0.1: f32) = const 0f32;        // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35
+         (_0.2: bool) = const false;      // scope 0 at $DIR/deaggregator_test.rs:+1:5: +1:35
          StorageDead(_2);                 // scope 0 at $DIR/deaggregator_test.rs:+1:34: +1:35
          return;                          // scope 0 at $DIR/deaggregator_test.rs:+2:2: +2:2
      }
  }
  
