- // MIR for `opt` before InstCombine
+ // MIR for `opt` after InstCombine
  
  fn opt(_1: bool) -> u32 {
      debug x => _1;                       // in scope 0 at $DIR/not_equal_false.rs:+0:8: +0:9
      let mut _0: u32;                     // return place in scope 0 at $DIR/not_equal_false.rs:+0:20: +0:23
      let mut _2: bool;                    // in scope 0 at $DIR/not_equal_false.rs:+1:8: +1:18
      let mut _3: bool;                    // in scope 0 at $DIR/not_equal_false.rs:+1:8: +1:9
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:18
          StorageLive(_3);                 // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:9
          _3 = _1;                         // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:9
-         _2 = Ne(move _3, const false);   // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:18
+         _2 = move _3;                    // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:18
          StorageDead(_3);                 // scope 0 at $DIR/not_equal_false.rs:+1:17: +1:18
          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:+1:8: +1:18
      }
  
      bb1: {
          _0 = const 0_u32;                // scope 0 at $DIR/not_equal_false.rs:+1:21: +1:22
          goto -> bb3;                     // scope 0 at $DIR/not_equal_false.rs:+1:5: +1:35
      }
  
      bb2: {
          _0 = const 1_u32;                // scope 0 at $DIR/not_equal_false.rs:+1:32: +1:33
          goto -> bb3;                     // scope 0 at $DIR/not_equal_false.rs:+1:5: +1:35
      }
  
      bb3: {
          StorageDead(_2);                 // scope 0 at $DIR/not_equal_false.rs:+1:34: +1:35
          return;                          // scope 0 at $DIR/not_equal_false.rs:+2:2: +2:2
      }
  }
  
