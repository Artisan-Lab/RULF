- // MIR for `encode` before SimplifyBranchSame
+ // MIR for `encode` after SimplifyBranchSame
  
  fn encode(_1: Type) -> Type {
      debug v => _1;                       // in scope 0 at $DIR/76803_regression.rs:+0:15: +0:16
      let mut _0: Type;                    // return place in scope 0 at $DIR/76803_regression.rs:+0:27: +0:31
      let mut _2: isize;                   // in scope 0 at $DIR/76803_regression.rs:+2:9: +2:16
  
      bb0: {
          _2 = discriminant(_1);           // scope 0 at $DIR/76803_regression.rs:+1:11: +1:12
          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/76803_regression.rs:+1:5: +1:12
      }
  
      bb1: {
          _0 = move _1;                    // scope 0 at $DIR/76803_regression.rs:+3:14: +3:15
          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:+3:14: +3:15
      }
  
      bb2: {
          Deinit(_0);                      // scope 0 at $DIR/76803_regression.rs:+2:20: +2:27
          discriminant(_0) = 1;            // scope 0 at $DIR/76803_regression.rs:+2:20: +2:27
          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:+2:20: +2:27
      }
  
      bb3: {
          return;                          // scope 0 at $DIR/76803_regression.rs:+5:2: +5:2
      }
  }
  
