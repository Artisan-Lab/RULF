- // MIR for `inlined_target_feature` before Inline
+ // MIR for `inlined_target_feature` after Inline
  
  fn inlined_target_feature() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:40: +0:40
      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21
+     scope 1 (inlined target_feature) {   // at $DIR/inline-compatibility.rs:13:5: 13:21
+     }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21
-         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:21
-                                          // mir::Constant
-                                          // + span: $DIR/inline-compatibility.rs:13:5: 13:19
-                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }
-     }
- 
-     bb1: {
          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:21: +1:22
          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:40: +2:2
          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2
      }
  }
  
