- // MIR for `not_inlined_c_variadic` before Inline
+ // MIR for `not_inlined_c_variadic` after Inline
  
  fn not_inlined_c_variadic() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:40: +0:40
      let _1: u32;                         // in scope 0 at $DIR/inline-compatibility.rs:+1:9: +1:10
      scope 1 {
          debug s => _1;                   // in scope 1 at $DIR/inline-compatibility.rs:+1:9: +1:10
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:9: +1:10
          _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline-compatibility.rs:+1:13: +1:52
                                           // mir::Constant
                                           // + span: $DIR/inline-compatibility.rs:42:13: 42:16
                                           // + literal: Const { ty: unsafe extern "C" fn(u32, ...) -> u32 {sum}, val: Value(<ZST>) }
      }
  
      bb1: {
          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:40: +2:2
          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+2:1: +2:2
          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2
      }
  }
  
