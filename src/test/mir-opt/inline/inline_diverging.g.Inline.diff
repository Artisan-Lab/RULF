- // MIR for `g` before Inline
+ // MIR for `g` after Inline
  
  fn g(_1: i32) -> u32 {
      debug i => _1;                       // in scope 0 at $DIR/inline-diverging.rs:+0:10: +0:11
      let mut _0: u32;                     // return place in scope 0 at $DIR/inline-diverging.rs:+0:21: +0:24
      let mut _2: bool;                    // in scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13
      let mut _3: i32;                     // in scope 0 at $DIR/inline-diverging.rs:+1:8: +1:9
      let mut _4: i32;                     // in scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10
      let mut _5: !;                       // in scope 0 at $DIR/inline-diverging.rs:+3:12: +5:6
      let _6: !;                           // in scope 0 at $DIR/inline-diverging.rs:+4:9: +4:16
+     scope 1 (inlined panic) {            // at $DIR/inline-diverging.rs:16:9: 16:16
+         let mut _7: !;                   // in scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL
+     }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13
          StorageLive(_3);                 // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:9
          _3 = _1;                         // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:9
          _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13
          StorageDead(_3);                 // scope 0 at $DIR/inline-diverging.rs:+1:12: +1:13
          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline-diverging.rs:+1:8: +1:13
      }
  
      bb1: {
          StorageLive(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10
          _4 = _1;                         // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10
          _0 = move _4 as u32 (IntToInt);  // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:17
          StorageDead(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:16: +2:17
          StorageDead(_2);                 // scope 0 at $DIR/inline-diverging.rs:+5:5: +5:6
          return;                          // scope 0 at $DIR/inline-diverging.rs:+6:2: +6:2
      }
  
      bb2: {
          StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:+4:9: +4:16
-         _6 = panic();                    // scope 0 at $DIR/inline-diverging.rs:+4:9: +4:16
+         StorageLive(_7);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL
+         _7 = begin_panic::<&str>(const "explicit panic"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL
                                           // mir::Constant
-                                          // + span: $DIR/inline-diverging.rs:16:9: 16:14
-                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(<ZST>) }
+                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL
+                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
+                                          // mir::Constant
+                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL
+                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }
      }
  }
  
