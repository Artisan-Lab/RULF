- // MIR for `inlined_no_sanitize` before Inline
+ // MIR for `inlined_no_sanitize` after Inline
  
  fn inlined_no_sanitize() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:+0:37: +0:37
      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18
+     scope 1 (inlined no_sanitize) {      // at $DIR/inline-compatibility.rs:24:5: 24:18
+     }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18
-         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:+1:5: +1:18
-                                          // mir::Constant
-                                          // + span: $DIR/inline-compatibility.rs:24:5: 24:16
-                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }
-     }
- 
-     bb1: {
          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:+1:18: +1:19
          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:+0:37: +2:2
          return;                          // scope 0 at $DIR/inline-compatibility.rs:+2:2: +2:2
      }
  }
  
