- // MIR for `mk_cycle` before Inline
+ // MIR for `mk_cycle` after Inline
  
  fn mk_cycle(_1: &dyn Cache<V = V>) -> () {
      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:+0:27: +0:28
      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:+0:49: +0:49
      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22
          _2 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22
          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:22
                                           // mir::Constant
                                           // + span: $DIR/dyn-trait.rs:21:7: 21:20
                                           // + literal: Const { ty: for<'a> fn(&'a dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(<ZST>) }
      }
  
      bb1: {
          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:21: +1:22
          return;                          // scope 0 at $DIR/dyn-trait.rs:+2:2: +2:2
      }
  }
  
