// MIR for `test` after Inline

fn test(_1: &dyn X) -> u32 {
    debug x => _1;                       // in scope 0 at $DIR/inline-trait-method.rs:+0:9: +0:10
    let mut _0: u32;                     // return place in scope 0 at $DIR/inline-trait-method.rs:+0:23: +0:26
    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method.rs:+1:5: +1:10

    bb0: {
        StorageLive(_2);                 // scope 0 at $DIR/inline-trait-method.rs:+1:5: +1:10
        _2 = &(*_1);                     // scope 0 at $DIR/inline-trait-method.rs:+1:5: +1:10
        _0 = <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline-trait-method.rs:+1:5: +1:10
                                         // mir::Constant
                                         // + span: $DIR/inline-trait-method.rs:9:7: 9:8
                                         // + literal: Const { ty: for<'a> fn(&'a dyn X) -> u32 {<dyn X as X>::y}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at $DIR/inline-trait-method.rs:+1:9: +1:10
        return;                          // scope 0 at $DIR/inline-trait-method.rs:+2:2: +2:2
    }
}
