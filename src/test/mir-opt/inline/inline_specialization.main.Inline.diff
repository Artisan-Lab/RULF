- // MIR for `main` before Inline
+ // MIR for `main` after Inline
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline-specialization.rs:+0:11: +0:11
      let _1: u32;                         // in scope 0 at $DIR/inline-specialization.rs:+1:9: +1:10
      scope 1 {
          debug x => _1;                   // in scope 1 at $DIR/inline-specialization.rs:+1:9: +1:10
      }
+     scope 2 (inlined <Vec<()> as Foo>::bar) { // at $DIR/inline-specialization.rs:5:13: 5:38
+     }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline-specialization.rs:+1:9: +1:10
-         _1 = <Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:+1:13: +1:38
-                                          // mir::Constant
-                                          // + span: $DIR/inline-specialization.rs:5:13: 5:36
-                                          // + literal: Const { ty: fn() -> u32 {<Vec<()> as Foo>::bar}, val: Value(<ZST>) }
-     }
- 
-     bb1: {
+         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34
          _0 = const ();                   // scope 0 at $DIR/inline-specialization.rs:+0:11: +2:2
          StorageDead(_1);                 // scope 0 at $DIR/inline-specialization.rs:+2:1: +2:2
          return;                          // scope 0 at $DIR/inline-specialization.rs:+2:2: +2:2
      }
  }
  
