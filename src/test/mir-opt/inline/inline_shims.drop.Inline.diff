- // MIR for `drop` before Inline
+ // MIR for `drop` after Inline
  
  fn drop(_1: *mut Vec<A>, _2: *mut Option<B>) -> () {
      debug a => _1;                       // in scope 0 at $DIR/inline-shims.rs:+0:19: +0:20
      debug b => _2;                       // in scope 0 at $DIR/inline-shims.rs:+0:35: +0:36
      let mut _0: ();                      // return place in scope 0 at $DIR/inline-shims.rs:+0:54: +0:54
      let _3: ();                          // in scope 0 at $DIR/inline-shims.rs:+1:14: +1:40
      let mut _4: *mut std::vec::Vec<A>;   // in scope 0 at $DIR/inline-shims.rs:+1:38: +1:39
      let mut _5: *mut std::option::Option<B>; // in scope 0 at $DIR/inline-shims.rs:+2:38: +2:39
      scope 1 {
      }
      scope 2 {
+         scope 3 (inlined std::ptr::drop_in_place::<Option<B>> - shim(Some(Option<B>))) { // at $DIR/inline-shims.rs:12:14: 12:40
+             let mut _6: isize;           // in scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
+             let mut _7: isize;           // in scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
+         }
      }
  
      bb0: {
          StorageLive(_3);                 // scope 0 at $DIR/inline-shims.rs:+1:5: +1:42
          StorageLive(_4);                 // scope 1 at $DIR/inline-shims.rs:+1:38: +1:39
          _4 = _1;                         // scope 1 at $DIR/inline-shims.rs:+1:38: +1:39
          _3 = std::ptr::drop_in_place::<Vec<A>>(move _4) -> bb1; // scope 1 at $DIR/inline-shims.rs:+1:14: +1:40
                                           // mir::Constant
                                           // + span: $DIR/inline-shims.rs:11:14: 11:37
                                           // + literal: Const { ty: unsafe fn(*mut Vec<A>) {std::ptr::drop_in_place::<Vec<A>>}, val: Value(<ZST>) }
      }
  
      bb1: {
          StorageDead(_4);                 // scope 1 at $DIR/inline-shims.rs:+1:39: +1:40
          StorageDead(_3);                 // scope 0 at $DIR/inline-shims.rs:+1:41: +1:42
          StorageLive(_5);                 // scope 2 at $DIR/inline-shims.rs:+2:38: +2:39
          _5 = _2;                         // scope 2 at $DIR/inline-shims.rs:+2:38: +2:39
-         _0 = std::ptr::drop_in_place::<Option<B>>(move _5) -> bb2; // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40
-                                          // mir::Constant
-                                          // + span: $DIR/inline-shims.rs:12:14: 12:37
-                                          // + literal: Const { ty: unsafe fn(*mut Option<B>) {std::ptr::drop_in_place::<Option<B>>}, val: Value(<ZST>) }
+         StorageLive(_6);                 // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40
+         StorageLive(_7);                 // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40
+         _6 = discriminant((*_5));        // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
+         switchInt(move _6) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
      }
  
      bb2: {
+         StorageDead(_7);                 // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40
+         StorageDead(_6);                 // scope 2 at $DIR/inline-shims.rs:+2:14: +2:40
          StorageDead(_5);                 // scope 2 at $DIR/inline-shims.rs:+2:39: +2:40
          return;                          // scope 0 at $DIR/inline-shims.rs:+3:2: +3:2
+     }
+ 
+     bb3: {
+         drop((((*_5) as Some).0: B)) -> bb2; // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
      }
  }
  
