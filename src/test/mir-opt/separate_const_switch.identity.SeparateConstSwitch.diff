- // MIR for `identity` before SeparateConstSwitch
+ // MIR for `identity` after SeparateConstSwitch
  
  fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {
      debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:+0:13: +0:14
      let mut _0: std::result::Result<i32, i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:+0:37: +0:53
      let mut _2: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
      let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
      let mut _4: std::result::Result<i32, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9
      let mut _5: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
      let _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
      let mut _7: !;                       // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
      let mut _8: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
      let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
      scope 1 {
          debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:+1:9: +1:10
          scope 2 {
              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:25:8: 25:10
                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL
                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL
                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL
                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL
                  scope 9 {
                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL
                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL
                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL
                      }
                  }
              }
          }
      }
      scope 3 {
          debug val => _9;                 // in scope 3 at $DIR/separate_const_switch.rs:+1:8: +1:10
          scope 4 {
          }
      }
      scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:25:8: 25:10
          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          scope 6 {
              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          }
          scope 7 {
              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          }
      }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
          StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9
          _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9
          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
-         switchInt(move _10) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
+         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
      }
  
      bb1: {
-         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
-         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
-         switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
-     }
- 
-     bb2: {
          StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
          _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
          _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:+1:8: +1:10
          StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11
          ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11
          discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11
          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11
          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2
          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2
      }
  
-     bb3: {
+     bb2: {
          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
      }
  
-     bb4: {
+     bb3: {
          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
          _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
          StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10
          _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10
          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL
          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL
          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL
          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL
          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL
          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL
          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL
          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10
          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11
          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2
          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2
      }
  
-     bb5: {
+     bb4: {
          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          Deinit(_14);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
-         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
+         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
+         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
      }
  
-     bb6: {
+     bb5: {
          unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
      }
  
-     bb7: {
+     bb6: {
          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL
          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
-         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL
+         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10
+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
+         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10
      }
  }
  
