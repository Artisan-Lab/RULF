error: this `match` can be collapsed into the outer `match`
  --> $DIR/collapsible_match.rs:13:20
   |
LL |           Ok(val) => match val {
   |  ____________________^
LL | |             Some(n) => foo(n),
LL | |             _ => return,
LL | |         },
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:13:12
   |
LL |         Ok(val) => match val {
   |            ^^^ replace this binding
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern
   = note: `-D clippy::collapsible-match` implied by `-D warnings`

error: this `match` can be collapsed into the outer `match`
  --> $DIR/collapsible_match.rs:22:20
   |
LL |           Ok(val) => match val {
   |  ____________________^
LL | |             Some(n) => foo(n),
LL | |             _ => return,
LL | |         },
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:22:12
   |
LL |         Ok(val) => match val {
   |            ^^^ replace this binding
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `if let`
  --> $DIR/collapsible_match.rs:31:9
   |
LL | /         if let Some(n) = val {
LL | |             take(n);
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:30:15
   |
LL |     if let Ok(val) = res_opt {
   |               ^^^ replace this binding
LL |         if let Some(n) = val {
   |                ^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `if let`
  --> $DIR/collapsible_match.rs:38:9
   |
LL | /         if let Some(n) = val {
LL | |             take(n);
LL | |         } else {
LL | |             return;
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:37:15
   |
LL |     if let Ok(val) = res_opt {
   |               ^^^ replace this binding
LL |         if let Some(n) = val {
   |                ^^^^^^^ with this pattern

error: this `match` can be collapsed into the outer `if let`
  --> $DIR/collapsible_match.rs:49:9
   |
LL | /         match val {
LL | |             Some(n) => foo(n),
LL | |             _ => (),
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:48:15
   |
LL |     if let Ok(val) = res_opt {
   |               ^^^ replace this binding
LL |         match val {
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `match`
  --> $DIR/collapsible_match.rs:58:13
   |
LL | /             if let Some(n) = val {
LL | |                 take(n);
LL | |             }
   | |_____________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:57:12
   |
LL |         Ok(val) => {
   |            ^^^ replace this binding
LL |             if let Some(n) = val {
   |                    ^^^^^^^ with this pattern

error: this `match` can be collapsed into the outer `if let`
  --> $DIR/collapsible_match.rs:67:9
   |
LL | /         match val {
LL | |             Some(n) => foo(n),
LL | |             _ => return,
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:66:15
   |
LL |     if let Ok(val) = res_opt {
   |               ^^^ replace this binding
LL |         match val {
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `match`
  --> $DIR/collapsible_match.rs:78:13
   |
LL | /             if let Some(n) = val {
LL | |                 take(n);
LL | |             } else {
LL | |                 return;
LL | |             }
   | |_____________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:77:12
   |
LL |         Ok(val) => {
   |            ^^^ replace this binding
LL |             if let Some(n) = val {
   |                    ^^^^^^^ with this pattern

error: this `match` can be collapsed into the outer `match`
  --> $DIR/collapsible_match.rs:89:20
   |
LL |           Ok(val) => match val {
   |  ____________________^
LL | |             Some(n) => foo(n),
LL | |             None => return,
LL | |         },
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:89:12
   |
LL |         Ok(val) => match val {
   |            ^^^ replace this binding
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `match` can be collapsed into the outer `match`
  --> $DIR/collapsible_match.rs:98:22
   |
LL |           Some(val) => match val {
   |  ______________________^
LL | |             Some(n) => foo(n),
LL | |             _ => return,
LL | |         },
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:98:14
   |
LL |         Some(val) => match val {
   |              ^^^ replace this binding
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `if let`
  --> $DIR/collapsible_match.rs:263:9
   |
LL | /         if let Some(u) = a {
LL | |             println!("{u:?}")
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:262:27
   |
LL |     if let Issue9647::A { a, .. } = x {
   |                           ^ replace this binding
LL |         if let Some(u) = a {
   |                ^^^^^^^ with this pattern, prefixed by a:

error: this `if let` can be collapsed into the outer `if let`
  --> $DIR/collapsible_match.rs:271:9
   |
LL | /         if let Some(u) = a {
LL | |             println!("{u}")
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> $DIR/collapsible_match.rs:270:35
   |
LL |     if let Issue9647::A { a: Some(a), .. } = x {
   |                                   ^ replace this binding
LL |         if let Some(u) = a {
   |                ^^^^^^^ with this pattern

error: aborting due to 12 previous errors

