error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> $DIR/single_match_else.rs:17:13
   |
LL |       let _ = match ExprNode::Butterflies {
   |  _____________^
LL | |         ExprNode::ExprAddrOf => Some(&NODE),
LL | |         _ => {
LL | |             let x = 5;
LL | |             None
LL | |         },
LL | |     };
   | |_____^
   |
   = note: `-D clippy::single-match-else` implied by `-D warnings`
help: try this
   |
LL ~     let _ = if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else {
LL +         let x = 5;
LL +         None
LL ~     };
   |

error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> $DIR/single_match_else.rs:82:5
   |
LL | /     match Some(1) {
LL | |         Some(a) => println!("${:?}", a),
LL | |         None => {
LL | |             println!("else block");
LL | |             return
LL | |         },
LL | |     }
   | |_____^
   |
help: try this
   |
LL ~     if let Some(a) = Some(1) { println!("${:?}", a) } else {
LL +         println!("else block");
LL +         return
LL +     }
   |

error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> $DIR/single_match_else.rs:91:5
   |
LL | /     match Some(1) {
LL | |         Some(a) => println!("${:?}", a),
LL | |         None => {
LL | |             println!("else block");
LL | |             return;
LL | |         },
LL | |     }
   | |_____^
   |
help: try this
   |
LL ~     if let Some(a) = Some(1) { println!("${:?}", a) } else {
LL +         println!("else block");
LL +         return;
LL +     }
   |

error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> $DIR/single_match_else.rs:101:5
   |
LL | /     match Result::<i32, Infallible>::Ok(1) {
LL | |         Ok(a) => println!("${:?}", a),
LL | |         Err(_) => {
LL | |             println!("else block");
LL | |             return;
LL | |         }
LL | |     }
   | |_____^
   |
help: try this
   |
LL ~     if let Ok(a) = Result::<i32, Infallible>::Ok(1) { println!("${:?}", a) } else {
LL +         println!("else block");
LL +         return;
LL +     }
   |

error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
  --> $DIR/single_match_else.rs:110:5
   |
LL | /     match Cow::from("moo") {
LL | |         Cow::Owned(a) => println!("${:?}", a),
LL | |         Cow::Borrowed(_) => {
LL | |             println!("else block");
LL | |             return;
LL | |         }
LL | |     }
   | |_____^
   |
help: try this
   |
LL ~     if let Cow::Owned(a) = Cow::from("moo") { println!("${:?}", a) } else {
LL +         println!("else block");
LL +         return;
LL +     }
   |

error: aborting due to 5 previous errors

