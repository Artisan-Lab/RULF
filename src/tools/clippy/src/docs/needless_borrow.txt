### What it does
Checks for address of operations (`&`) that are going to
be dereferenced immediately by the compiler.

### Why is this bad?
Suggests that the receiver of the expression borrows
the expression.

### Example
```
fn fun(_a: &i32) {}

let x: &i32 = &&&&&&5;
fun(&x);
```

Use instead:
```
let x: &i32 = &5;
fun(x);
```